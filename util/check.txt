In this assignment, you will explore the implementation of a particular file system, ext2, and will write tools to modify ext2-format virtual disks. To do this work, you will need to be comfortable working with binary data and will need to learn about the ext2 filesystem. You will additionally need to demonstrate good synchronization practices, as a culmination of the practice you got with synchronization throughout this course.

You can work in pairs for this assignment. MarkUs will only create the appropriate A4 directory in your repository when you log into MarkUs and either invite a partner, or declare that you will work alone. As usual, please log into MarkUs well before the deadline to make sure you can access your repository. (Do not create an A4 the directory in your git repo, otherwise MarkUs won't know about it and we won't be able to see your work.)

For implementing any additional functionality which is not specified in the handout, or if you are unsure whether to handle some inode parameters in specific cases (after having read the documentation!), please ask on the discussion board.
Your task is to implement an API (in C) of file system commands to operate on an ext2-formatted virtual disk concurrently. That means that your API implementation will need to ensure that all operations are synchronized correctly with respect to other concurrent instances of files system operations that may be performed on the same file system. The operations you will have to implement are described below, including their arguments. 
